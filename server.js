// Generated by CoffeeScript 1.8.0
(function() {
  var auth, fs, handler, http, noteDir, parseCookies, path, savePage, serveIndex, serveLogin, servePage;

  http = require('http');

  fs = require('fs');

  path = require('path');

  noteDir = (process.env.NOTEDIR || 'notes') + '/';

  parseCookies = function(request) {
    var list, rc;
    list = {};
    rc = request.headers.cookie;
    rc && rc.split(";").forEach(function(cookie) {
      var parts;
      parts = cookie.split("=");
      list[parts.shift().trim()] = unescape(parts.join("="));
    });
    return list;
  };

  auth = function(cookie) {
    if (!process.env.NOTEDPASS) {
      return true;
    }
    if (cookie.notedpass === process.env.NOTEDPASS) {
      return true;
    }
  };

  handler = function(req, res) {
    if (!auth(parseCookies(req))) {
      return serveLogin(req, res);
    }
    if (['favicon.ico'].indexOf(path.basename(req.url)) > -1) {
      res.writeHead(404);
      return res.end();
    }
    if (req.url === '/') {
      return serveIndex('html', req, res);
    }
    if (req.url === '/index.js') {
      return serveIndex('js', req, res);
    }
    if (req.url.split('/')[1] !== 'api') {
      return serveIndex('html', req, res);
    }
    req.url.replace(/\./g, '');
    req.url.replace(/api\//, '');
    if (req.method === 'PUT') {
      return savePage(req, res);
    }
    if (req.method === 'GET') {
      return servePage(req, res);
    }
  };

  serveIndex = function(ext, req, res) {
    return fs.createReadStream("./index." + ext).pipe(res);
  };

  serveLogin = function(req, res) {
    res.writeHead(403);
    return fs.createReadStream("./login.html").pipe(res);
  };

  servePage = function(req, res) {
    var reader;
    reader = fs.createReadStream(noteDir + path.basename(req.url));
    reader.on('error', function(err) {
      return res.end("");
    });
    return reader.pipe(res);
  };

  savePage = function(req, res) {
    return req.pipe(fs.createWriteStream(noteDir + path.basename(req.url))).on('close', function() {
      return res.end();
    });
  };

  http.createServer(handler).listen(process.env.PORT || 3000);

}).call(this);
